// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"btceden/internal/biz"
	"btceden/internal/conf"
	"btceden/internal/data"
	"btceden/internal/server"
	"btceden/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	tvlRepo := data.NewTVLRepo(dataData, logger)
	tvlUsecase := biz.NewTVLUsecase(confData, tvlRepo, logger)
	tpsRepo := data.NewTPSRepo(dataData, logger)
	tpsUsecase := biz.NewTPSUsecase(confData, tpsRepo, logger)
	gasRepo := data.NewGASRepo(dataData, logger)
	gasUsecase := biz.NewGASUsecase(confData, gasRepo, logger)
	summaryService := service.NewSummaryService(confData, tvlUsecase, tpsUsecase, gasUsecase, logger)
	proxyRepo := data.NewProxyRepo(dataData, logger)
	proxyUsecase := biz.NewProxyUsecase(confData, proxyRepo, logger)
	proxyService := service.NewProxyService(confData, proxyUsecase, logger)
	httpServer := server.NewHTTPServer(confServer, summaryService, proxyService, logger)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
